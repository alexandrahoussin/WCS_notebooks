{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Monty Hall","provenance":[{"file_id":"1qYVqUANQIHZHVTjIyPcRWyqf2Xj6Z8V8","timestamp":1634114119775}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"s6odsFbLpgIh"},"source":["# Monty Hall\n","\n","**Below is an example of an implementation of the Monty Hall game using native Python. It contains no comments.**"]},{"cell_type":"markdown","metadata":{"id":"QAqgGziZPsIZ"},"source":["## Mission 1\n","\n","After reviewing the code below, add both **unilinear** and **multilinear** comments to explain how it works to another developer."]},{"cell_type":"code","metadata":{"id":"0dL7B4XiO1ft","colab":{"base_uri":"https://localhost:8080/","height":268},"executionInfo":{"status":"ok","timestamp":1634204430466,"user_tz":-120,"elapsed":563,"user":{"displayName":"Alexandra Houssin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14649686506859663756"}},"outputId":"bd925484-5a55-4fa2-c906-5e38dcf8d36c"},"source":["import matplotlib.pyplot as plt\n","from random import choice\n","\n","def play_one_game(strategy):                                                                # définition d'une fonction qui prend en paramètre la stratégie du joueur (changer ou garder son premier choix de porte)\n","\n","  doors = ['A', 'B', 'C']                                                                   # le jeu contient 3 portes    \n","  correct_door = choice(doors)                                                              # on fait un choix aléatoire d'une porte qui sera la porte gagnante (avec la voiture)\n","  \n","  first_choice = choice(doors)                                                              # le joueur choisi aléatoirement une porte sur les 3, son premier choix. \n","  doors.remove(first_choice)                                                                # on retire cette porte de la liste. Il ne reste plus que les 2 autres portes\n","\n","  while True:                                                                               # \n","    hint_door = choice(doors)                                                               # sur les deux portes restante, le présentateur doit en ouvrir une\n","    if hint_door != correct_door:                                                           # il ne peut pas ouvrir la porte contenant la voiture\n","      doors.remove(hint_door)                                                               # on enlève donc cette porte ouverte de la liste. Il ne reste plus qu'une porte\n","      break\n","\n","  if strategy.lower() == \"change\":                                                          # stratégie du joueur : soit il change de porte \n","      second_choice = choice(doors)                                                         # et donc sa porte est la porte restante de la liste\n","  elif strategy.lower() == \"keep\":                                                          # soit il garde son premier choix\n","      second_choice = first_choice\n","  else:\n","      raise ValueError(\"Strategy not recognized!\")\n","  \n","  return second_choice == correct_door                                                      # retourne faux si le joueur a perdu et vrai si il y a la voiture derrière sa porte\n","\n","\n","def play_many_games(strategy, nb_turns):                                                    # nouvelle fonction qui va jouer plusieurs tours du jeu précédent. \n","    return list(1 if play_one_game(strategy) else 0 for i in range(nb_turns))               # elle retourne une liste contenant des 1 si le joueur gagne, 0 s'il perd. \n","\n","\n","plot = plt.bar([1, 2],                                                                            # on affiche graphiquement le résultat du tirage. Le but étant de montrer quelle stratégie a le plus de chance de réussir.\n","               [sum(play_many_games(\"change\", 10000)), sum(play_many_games(\"keep\", 10000))],      # on additionne les résultats obtenus sur un nombre de tirages identiques, sur les deux stratégies  \n","               tick_label=[\"Change\", \"Keep\"])                                                     # celle qui aura le plus de réussite (donc plus de 1), sera la plus payante. Ici de changer."],"execution_count":2,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"KPuEESZDP-C-"},"source":["# Mission 2\n","\n","To make sure you understood the code, in a new cell, change up the code in mission 1 to add a third bar, corresponding to a new strategy called **Alternate**. \n","\n","A player following it will alternate **randomly** between \"Change\" and \"Keep\".\n"]},{"cell_type":"code","metadata":{"id":"3R82gwZxP9oo","colab":{"base_uri":"https://localhost:8080/","height":267},"executionInfo":{"status":"ok","timestamp":1634204433332,"user_tz":-120,"elapsed":529,"user":{"displayName":"Alexandra Houssin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14649686506859663756"}},"outputId":"3e02aef3-5866-4d18-d718-95bc20ed3173"},"source":["def play_one_game(strategy):                                                                \n","\n","  doors = ['A', 'B', 'C']                                                                      \n","  correct_door = choice(doors)                                                              \n","  \n","  first_choice = choice(doors)                                                              \n","  doors.remove(first_choice)                                                                \n","\n","  while True:                                                                               \n","    hint_door = choice(doors)                                                               \n","    if hint_door != correct_door:                                                           \n","      doors.remove(hint_door)                                                               \n","      break\n","\n","  if strategy.lower() == \"change\":                                                          \n","      second_choice = choice(doors)                                                         \n","  elif strategy.lower() == \"keep\":                                                          \n","      second_choice = first_choice\n","  elif strategy.lower() == 'alternate':                                                     # ajout de la stratégie alternate qui choisi une stratégie aléatoire entre keep et change\n","      strategy = choice(['change', 'keep'])     \n","      if strategy.lower() == \"change\":                                                      # on remet donc dans cette condition les conditions des stratégie keep et change    \n","        second_choice = choice(doors)                                                         \n","      elif strategy.lower() == \"keep\":                                                          \n","        second_choice = first_choice\n","  else:\n","      raise ValueError(\"Strategy not recognized!\")\n","  \n","  return second_choice == correct_door                                                      \n","\n","\n","def play_many_games(strategy, nb_turns):                                                     \n","    return list(1 if play_one_game(strategy) else 0 for i in range(nb_turns))               \n","\n","\n","plot = plt.bar([1, 2, 3],                                                                            \n","               [sum(play_many_games(\"change\", 10000)), sum(play_many_games(\"keep\", 10000)), sum(play_many_games(\"alternate\", 10000))],      #ajout de la barre alternate \n","               tick_label=[\"Change\", \"Keep\", \"Alternate\"])                                        "],"execution_count":3,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"VPjKxsbQQbbx"},"source":["# Mission 3\n","\n","Now, re-code the Monty Hall game using NumPy. **Do not use Python lists, the built-in `random` module, or any for or while loops in the code**. NumPy contains all the mechanisms you need to achieve the same result.\n","\n","Finally, combine the 2 functions, `play_one_game` and `play_many_games`. In other words, **your NumPy program should now contain only one function**. Obviously, **the visual should be the same as in mission 2**."]},{"cell_type":"code","metadata":{"id":"IwRDK_YtQbre","colab":{"base_uri":"https://localhost:8080/","height":265},"executionInfo":{"status":"ok","timestamp":1634204847740,"user_tz":-120,"elapsed":211,"user":{"displayName":"Alexandra Houssin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14649686506859663756"}},"outputId":"1e8dc672-3bc6-4aee-ca20-c8d296701987"},"source":["import numpy as np\n","\n","def play_game(nb_turns):\n","\n","  # choix aléatoire de la porte gagnante, du premier choix du joueur et de la porte aléatoire \n","  correct_door = np.random.randint(0, 3, nb_turns)\n","  first_choice = np.random.randint(0, 3, nb_turns)\n","  alternative_door = np.random.randint(0, 2, nb_turns)\n","\n","  # si le joueur garde la même porte : il ne peut gagner que si la bonne porte est celle qu'il a choisi\n","  keep = correct_door[correct_door == first_choice]\n","  # à l'inverse, s'il change de porte, pour gagner il ne faut pas que son premier choix soit la bonne\n","  change = correct_door[correct_door != first_choice]\n","  # en alternant entre les 2 : il gagne si la porte aléatoire = 0 (soit keep) et que cette porte est celle choisie OU si la porte aléatoire est 1 (change) et donc que son premier choix n'était pas la bonne porte.\n","  alternate = correct_door[((alternative_door == 0) & (first_choice == correct_door)) | ((alternative_door == 1) & (first_choice != correct_door))]\n","\n","\n","  # on retourne les sizes des tableaux keep et change:\n","  return [change.size, keep.size, alternate.size]\n","\n","\n","plot = plt.bar([1, 2, 3],                                                                            \n","               play_game(10000),      \n","               tick_label=[\"Change\", \"Keep\", 'Alternate'])"],"execution_count":9,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]}]}